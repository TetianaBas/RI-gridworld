import numpy as np
rows = 3
columns = 4
win = (0, 3)
lose = (1, 3)
start = (2, 0)
determin = True


class State:
    def __init__(self, state= start):
        self.board = np.zeros([rows, columns])
        self.board[1, 1] = -1
        self.state = state
        self.isEnd = False
        self.determin = determin

    def giveReward(self):
        if self.state == win:
            return 1
        elif self.state == lose:
            return -1
        else:
            return 0

    def isEndFunc(self):
        if (self.state == win) or (self.state == lose):
            self.isEnd = True

    def nxtPosition(self, action):
        """
        perform action: up, down, left, right,
        change the state based on the action, 
        check if the next position is valid.
        """
        if self.determin:
            if action == "up":
                nxtState = (self.state[0] - 1, self.state[1])
            elif action == "down":
                nxtState = (self.state[0] + 1, self.state[1])
            elif action == "left":
                nxtState = (self.state[0], self.state[1] - 1)
            else:
                nxtState = (self.state[0], self.state[1] + 1)
           
            if (nxtState[0] >= 0) and (nxtState[0] <= 2): #check row boundaries 
                if (nxtState[1] >= 0) and (nxtState[1] <= 3): #check column boundaries
                    if nxtState != (1, 1): #check if not lost 
                        return nxtState
            return self.state 

    def showBoard(self):
        self.board[self.state] = 1
        for i in range(0, BOARD_ROWS):
            print('-----------------')
            out = '| '
            for j in range(0, BOARD_COLS):
                if self.board[i, j] == 1:
                    token = '*'
                if self.board[i, j] == -1:
                    token = 'z'
                if self.board[i, j] == 0:
                    token = '0'
                out += token + ' | '
            print(out)
        print('-----------------')



class Agent:

    def __init__(self):
        self.states = []
        self.actions = ["up", "down", "left", "right"]
        self.State = State()
        self.lr = 0.1
        self.exp_rate = 0.3

        # initial state reward
        self.state_values = {}
        for i in range(rows):
            for j in range(columns):
                self.state_values[(i, j)] = 0  

    def chooseAction(self):
        # choose action with most expected value
        mx_nxt_reward = 0
        action = ""
        
        if np.random.uniform(0, 1) <= self.exp_rate:
            action = np.random.choice(self.actions)
        else:
            # greedy action
            for a in self.actions:
                # Get the next state
                next_state = self.State.nxtPosition(a)
                nxt_reward = self.state_values[next_state]
                if nxt_reward >= mx_nxt_reward:
                    action = a
                    mx_nxt_reward = nxt_reward
        return action
    
    def takeAction(self, action):
        position = self.State.nxtPosition(action)
        return State(state=position)

    def reset(self):
        self.states = []
        self.State = State()

    def play(self, rounds=10):
        i = 0
        while i < rounds:
            #check if the game has ended
            if self.State.isEnd:
                #restore the path backwards
                reward = self.State.giveReward()
                #store the reward obtained for the current state
                self.state_values[self.State.state] = reward  
                for s in reversed(self.states):
                    #apply q learning alg
                    reward = self.state_values[s] + self.lr * (reward - self.state_values[s])
                    self.state_values[s] = round(reward, 3)
                self.reset()
                i += 1
            else:
                action = self.chooseAction()
                self.states.append(self.State.nxtPosition(action))
                self.State = self.takeAction(action)
                self.State.isEndFunc()
            
    def showValues(self):
        for i in range(0, rows):
            print('----------------------------------')
            out = '| '
            for j in range(0, columns):
                out += str(self.state_values[(i, j)]).ljust(6) + ' | '
            print(out)
        print('----------------------------------')


if __name__ == "__main__":
    ag = Agent()
    ag.play(50)
    print(ag.showValues())

    
